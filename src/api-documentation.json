{
  "openapi": "3.0.0",
  "info": {
    "title": "Aion API",
    "description": "Aion",
    "contact": {
      "name": "Aion corps",
      "email": "aioncorps@gmail.com"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Responsible for register and authenticated of user on platform"
    },
    {
      "name": "Category",
      "description": "Categories Manipulations"
    },
    {
      "name": "Modality",
      "description": "Modalities Manipulations"
    },
    {
      "name": "Transactions",
      "description": "Transactions of User"
    },
    {
      "name": "User",
      "description": "Everything that involves the user model "
    },
    {
      "name": "Analytics",
      "description": "Analytics transactions of User"
    },
    {
      "name": "InformationFixed",
      "description": "Information fixed of User"
    },
    {
      "name": "GoalBox",
      "description": "Goal's Box of User"
    }
  ],
  "paths": {
    "api/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Create One User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/definitions/Login"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/AuthenticateAndRegister"
                }
              }
            }
          },
          "400": {
            "description": "Return when a user try to register and the email is already in use"
          }
        }
      }
    },
    "api/auth/authenticate": {
      "post": {
        "tags": ["Auth"],
        "summary": "Authenticated a user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/Login"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/AuthenticateAndRegister"
                }
              }
            }
          },
          "400": {
            "description": "Return when the password of user, not match with email"
          },
          "404": {
            "description": "User not found!"
          }
        }
      }
    },
    "api/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Return an new token to user",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found!"
          }
        }
      }
    },
    "api/category/": {
      "get": {
        "tags": ["Category"],
        "summary": "Find every categories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/definitions/CategoryModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Category"],
        "summary": "Create new category",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/CategoryModel"
                }
              }
            }
          }
        }
      }
    },
    "api/category/:id?": {
      "delete": {
        "tags": ["Category"],
        "summary": "Delete an category",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {},
          "400": {
            "description": "When the category Id is not presence on params"
          },
          "404": {
            "description": "When a id of category is not found"
          }
        }
      }
    },
    "api/modality/": {
      "get": {
        "tags": ["Modality"],
        "summary": "Get all Modalities",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/definitions/ModalityModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Modality"],
        "summary": "Create an new Modality",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/ModalityModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/ModalityModel"
                }
              }
            }
          },
          "400": {
            "description": "Return when user try create an modality that's already exist"
          }
        }
      }
    },
    "api/modality/:id?": {
      "delete": {
        "tags": ["Modality"],
        "summary": "User delete an Modality",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {},
          "400": {
            "description": "When the modality Id is not presence on params"
          },
          "404": {
            "description": "When a id of modality is not found"
          }
        }
      }
    },
    "api/transaction/": {
      "get": {
        "tags": ["Transactions"],
        "summary": "Get all transactions of user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "page": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/definitions/TransactionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When user no have transactions"
          }
        }
      },
      "post": {
        "tags": ["Transactions"],
        "summary": "Get all transactions of user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/TransactionModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/TransactionModel"
                }
              }
            }
          },
          "404": {
            "description": "Return when an field is missing"
          }
        }
      }
    },
    "api/transaction/:transactionId?": {
      "delete": {
        "tags": ["Transactions"],
        "summary": "Delete an transaction of historic",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {},
          "400": {
            "description": "Return when transactionId is missing"
          },
          "404": {
            "description": "Return when the transaction is not found"
          }
        }
      }
    },
    "api/user/updatePassword": {
      "patch": {
        "tags": ["User"],
        "summary": "User can change your password",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "currentPassword",
                  "newPassword"
                ],
                "properties": {
                  "currentPassword": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {},
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Password must be different!": {
                      "example": "Return this error when both passwords are the same"
                    },
                    "The password not match with your current password!": {
                      "example": "Return this error when the `currentPassword` not match with password on database"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "${key} is required!": {
                      "example": "Return this error when `currentPassword` or `newPassword` is missing"
                    },
                    "User not found!": {
                      "example": "Return this error when user not found on database"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "api/analytics/getSummaryByCategory/:categoryId": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Calculates and returns the percentage, the difference between the current month and the last month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "difference": {
                      "type": "number"
                    },
                    "percent": {
                      "type": "number"
                    },
                    "currentMonth": {
                      "type": "number"
                    },
                    "lastMonth": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Return when the category is not found"
          }
        }
      }
    },
    "api/analytics/sumAmountsByMonth": {
      "get": {
        "tags": ["Analytics"],
        "summary": "Calculates and returns the percentage, the difference between the current month and the last month",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "date": {
                        "type": "string",
                        "example": "month/year"
                      },
                      "income": {
                        "type": "number"
                      },
                      "outcome": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "api/infofixed/": {
      "get": {
        "tags": ["InformationFixed"],
        "summary": "Get all informations of user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fixedIncome": {
                      "type": "number"
                    },
                    "fixedOutcome": {
                      "type": "number"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Return this error when user not have this informations"
          }
        }
      },
      "post": {
        "tags": ["InformationFixed"],
        "summary": "User register your informations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "fixedIncome",
                  "fixedOutcome"
                ],
                "properties": {
                  "fixedIncome": {
                    "type": "number"
                  },
                  "fixedOutcome": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fixedIncome": {
                      "type": "number"
                    },
                    "fixedOutcome": {
                      "type": "number"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Return this error when user already this informations"
          }
        }
      },
      "patch": {
        "tags": ["InformationFixed"],
        "summary": "User update your informations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fixedIncome": {
                    "type": "number"
                  },
                  "fixedOutcome": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "fixedIncome": {
                      "type": "number"
                    },
                    "fixedOutcome": {
                      "type": "number"
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Return this error when user not have this informations"
          }
        }
      }
    },
    "api/goalbox/": {
      "post": {
        "tags": ["GoalBox"],
        "summary": "User register your Goal's Box",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "goalName",
                  "goalCost",
                  "goalTime",
                  "initialValue"
                ],
                "properties": {
                  "goalName": {
                    "type": "string"
                  },
                  "goalCost": {
                    "type": "number"
                  },
                  "goalTime": {
                    "type": "object",
                    "properties": {
                      "endDate": {
                        "type": "string",
                        "format": "date"
                      }
                    }
                  },
                  "initialValue": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goalName": {
                      "type": "string"
                    },
                    "goalCost": {
                      "type": "number"
                    },
                    "goalTime": {
                      "type": "object",
                      "properties": {
                        "initialDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        }
                      }
                    },
                    "balance": {
                      "type": "number"
                    },
                    "historicTransaction": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "modeTransaction": {
                          "type": "string",
                          "enum": ["LESS", "MORE"]
                        }
                      }
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Return this error when have some error on find user infos"
          }
        }
      },
      "get": {
        "tags": ["GoalBox"],
        "summary": "User get every Goal's Box own",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object",
                    "properties": {
                      "goalName": {
                        "type": "string"
                      },
                      "goalCost": {
                        "type": "number"
                      },
                      "goalTime": {
                        "type": "object",
                        "properties": {
                          "initialDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endDate": {
                            "type": "string",
                            "format": "date"
                          },
                          "endMonths": {
                            "type": "number"
                          }
                        }
                      },
                      "balance": {
                        "type": "number"
                      },
                      "payOff": {
                        "type": "number"
                      },
                      "_id": {
                        "type": "string"
                      },
                      "historicTransaction": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "modeTransaction": {
                            "type": "string",
                            "enum": ["LESS", "MORE"]
                          }
                        }
                      },
                      "user": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Return this error when user not have goals"
          }
        }
      }
    },
    "api/goalbox/findUnique/:goalBoxId": {
      "get": {
        "tags": ["GoalBox"],
        "summary": "Find unique goal",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "goalBoxId",
            "in": "params",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goalName": {
                      "type": "string"
                    },
                    "goalCost": {
                      "type": "number"
                    },
                    "goalTime": {
                      "type": "object",
                      "properties": {
                        "initialDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endMonths": {
                          "type": "number"
                        }
                      }
                    },
                    "balance": {
                      "type": "number"
                    },
                    "payOff": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "historicTransaction": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "modeTransaction": {
                          "type": "string",
                          "enum": ["LESS", "MORE"]
                        }
                      }
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Return this error when user on goal not is the same of userId"
          },
          "404": {
            "description": "Return this error when goal not find"
          }
        }
      }
    },
    "api/goalbox/:goalBoxId": {
      "patch": {
        "tags": ["GoalBox"],
        "summary": "Update infos of an unique goal",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "goalBoxId",
            "in": "params",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "balanceValue": {
                    "type": "number"
                  },
                  "modeSum": {
                    "type": "string",
                    "enum": ["LESS", "MORE"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "goalName": {
                      "type": "string"
                    },
                    "goalCost": {
                      "type": "number"
                    },
                    "goalTime": {
                      "type": "object",
                      "properties": {
                        "initialDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endDate": {
                          "type": "string",
                          "format": "date"
                        },
                        "endMonths": {
                          "type": "number"
                        }
                      }
                    },
                    "balance": {
                      "type": "number"
                    },
                    "payOff": {
                      "type": "number"
                    },
                    "_id": {
                      "type": "string"
                    },
                    "historicTransaction": {
                      "type": "object",
                      "properties": {
                        "date": {
                          "type": "string",
                          "format": "date"
                        },
                        "amount": {
                          "type": "number"
                        },
                        "modeTransaction": {
                          "type": "string",
                          "enum": ["LESS", "MORE"]
                        }
                      }
                    },
                    "user": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Return this error when have some error on update goal"
          },
          "404": {
            "description": "Return this error when not is possible find this goal"
          }
        }
      },
      "delete": {
        "tags": ["GoalBox"],
        "summary": "Delete one goal",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "goalBoxId",
            "in": "params",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    }
  },
  "definitions": {
    "Login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "AuthenticateAndRegister": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/definitions/UserModel"
            }
          }
        },
        {
          "type": "object",
          "properties": {
            "token": {
              "type": "string"
            }
          }
        }
      ]
    },
    "GetTransactionByPeriod": {

    },
    "UserModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date",
          "example": "2023-01-01T00:00:00.000Z"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "example": "2023-01-01T00:00:00.000Z"
        }
      }
    },
    "CategoryModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "ModalityModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "category": {
          "type": "string"
        }
      }
    },
    "TransactionModel": {
      "type": "object",
      "required": [
        "description",
        "category",
        "type",
        "modality",
        "amount",
        "user",
        "date"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string",
          "description": "FK of an category"
        },
        "type": {
          "type": "string"
        },
        "modality": {
          "type": "string",
          "description": "FK of an modality"
        },
        "amount": {
          "type": "number"
        },
        "user": {
          "type": "string",
          "description": "FK of user's own"
        },
        "date": {
          "type": "string",
          "format": "date",
          "example": "2023-01-01T00:00:00.000Z",
          "description": "Date the transaction was made"
        },
        "updatedAt": {
          "type": "string",
          "format": "date",
          "example": "2023-01-01T00:00:00.000Z"
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "schema": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
